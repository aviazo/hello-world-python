

trigger:
- master

resources:
- repo: self


variables:
  ImageName: 'lidorlg/sample-app-python'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2    
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(ImageName)'
        command: 'build'
        DockerFile: '**/Dockerfile'
      displayName: "Build the Docker image number $(Build.BuildId)"
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(ImageName)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: 'latest'
      displayName: 'Build the latest Docker image'
    - task: Docker@2      
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(ImageName)'
        command: 'push'
        
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: "Push the Docker image number $(Build.BuildId) to Dockerhub"

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(ImageName)'
        command: 'push'
        tags: 'latest'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Push the latest Docker image to Dockerhub'
    
- stage: Provision
  displayName: Provision with Terraform
  jobs:
  - job: Provision
    displayName: Provision
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformTaskV4@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - checkout: self
      displayName: 'Checkout repository'

    - task: TerraformTaskV4@1
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(Build.SourcesDirectory)'
        backendType: 'aws'
        ensureBackend: true
        backendServiceArm: 'aws'
        resourceGroupName: '<resource_group_name>'
        storageAccountName: '<storage_account_name>'
        containerName: '<container_name>'
        key: '<state_file_key>'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(Build.SourcesDirectory)'
        environmentServiceName: 'aws'
        commandOptions: '-out=tfplan'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(Build.SourcesDirectory)'
        environmentServiceName: 'aws'
        commandOptions: '-auto-approve -input=false tfplan'

